{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\thane\\\\Desktop\\\\React_Redux\\\\thane-engen.com\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\thane\\\\Desktop\\\\React_Redux\\\\thane-engen.com\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\thane\\\\Desktop\\\\React_Redux\\\\thane-engen.com\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\thane\\\\Desktop\\\\React_Redux\\\\thane-engen.com\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\thane\\\\Desktop\\\\React_Redux\\\\thane-engen.com\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _ from'lodash';import React from\"react\";import{connect}from\"react-redux\";import{getRecipe,editRecipe}from\"../../actions\";import Modal from\"../Modal\";var RecipeEdit=/*#__PURE__*/function(_React$Component){_inherits(RecipeEdit,_React$Component);function RecipeEdit(){var _getPrototypeOf2;var _this;_classCallCheck(this,RecipeEdit);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(RecipeEdit)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.onSubmit=function(formValues){_this.props.editRecipe(_this.props.match.params.id,formValues);};return _this;}_createClass(RecipeEdit,[{key:\"componentDidMount\",value:function componentDidMount(){this.props.getRecipe(this.props.match.params.id);}// onSubmit is passed down as prop to Modal.js then RecipeForm.js\n// formValues is equal to the field values when data is submitted in RecipeForm.js\n},{key:\"render\",value:function render(){return React.createElement(\"div\",null,React.createElement(Modal,{type:\"Edit\"// 'pick' desired data from selected recipe to fill formValues\n,initialValues:_.pick(this.props.selectedRecipe,\"title\",\"ingredients\",\"directions\"),onSubmit:this.onSubmit}));}}]);return RecipeEdit;}(React.Component);var mapStateToProps=function mapStateToProps(state,ownProps){return{selectedRecipe:state.recipes[ownProps.match.params.id]};};export default connect(mapStateToProps,{getRecipe:getRecipe,editRecipe:editRecipe})(RecipeEdit);","map":{"version":3,"sources":["C:/Users/thane/Desktop/React_Redux/thane-engen.com/client/src/components/projects/recipe-box/components/recipes/RecipeEdit.js"],"names":["_","React","connect","getRecipe","editRecipe","Modal","RecipeEdit","onSubmit","formValues","props","match","params","id","pick","selectedRecipe","Component","mapStateToProps","state","ownProps","recipes"],"mappings":"q7BAAA,MAAOA,CAAAA,CAAP,KAAc,QAAd,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,SAAT,CAAoBC,UAApB,KAAsC,eAAtC,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,C,GAEMC,CAAAA,U,2ZAOJC,Q,CAAW,SAAAC,UAAU,CAAI,CACvB,MAAKC,KAAL,CAAWL,UAAX,CAAsB,MAAKK,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA9C,CAAkDJ,UAAlD,EACD,C,mGARmB,CAClB,KAAKC,KAAL,CAAWN,SAAX,CAAqB,KAAKM,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA7C,EACD,CAED;AACA;uCAKS,CACP,MACE,gCACE,oBAAC,KAAD,EACE,IAAI,CAAC,MACL;AAFF,CAGE,aAAa,CAAEZ,CAAC,CAACa,IAAF,CAAO,KAAKJ,KAAL,CAAWK,cAAlB,CAAkC,OAAlC,CAA2C,aAA3C,CAA0D,YAA1D,CAHjB,CAIE,QAAQ,CAAE,KAAKP,QAJjB,EADF,CADF,CAUD,C,wBAtBsBN,KAAK,CAACc,S,EAyB/B,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAQC,QAAR,CAAqB,CAC3C,MAAO,CAAEJ,cAAc,CAAEG,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACR,KAAT,CAAeC,MAAf,CAAsBC,EAApC,CAAlB,CAAP,CACD,CAFD,CAIA,cAAeV,CAAAA,OAAO,CACpBc,eADoB,CAEpB,CAAEb,SAAS,CAATA,SAAF,CAAaC,UAAU,CAAVA,UAAb,CAFoB,CAAP,CAGbE,UAHa,CAAf","sourcesContent":["import _ from 'lodash';\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getRecipe, editRecipe } from \"../../actions\";\nimport Modal from \"../Modal\";\n\nclass RecipeEdit extends React.Component {\n  componentDidMount() {\n    this.props.getRecipe(this.props.match.params.id);\n  }\n\n  // onSubmit is passed down as prop to Modal.js then RecipeForm.js\n  // formValues is equal to the field values when data is submitted in RecipeForm.js\n  onSubmit = formValues => {\n    this.props.editRecipe(this.props.match.params.id, formValues);\n  };\n\n  render() {\n    return (\n      <div>\n        <Modal \n          type=\"Edit\" \n          // 'pick' desired data from selected recipe to fill formValues\n          initialValues={_.pick(this.props.selectedRecipe, \"title\", \"ingredients\", \"directions\")}\n          onSubmit={this.onSubmit} \n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { selectedRecipe: state.recipes[ownProps.match.params.id] };\n};\n\nexport default connect(\n  mapStateToProps,\n  { getRecipe, editRecipe }\n)(RecipeEdit);\n"]},"metadata":{},"sourceType":"module"}