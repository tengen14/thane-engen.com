{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thane\\\\Desktop\\\\React_Redux\\\\thane-engen.com\\\\client\\\\src\\\\components\\\\projects\\\\recipe-box\\\\components\\\\recipes\\\\RecipeEdit.js\";\nimport _ from 'lodash';\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getRecipe, editRecipe } from \"../../actions\";\nimport Modal from \"../Modal\";\n\nclass RecipeEdit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      this.props.editRecipe(this.props.match.params.id, formValues);\n    };\n  }\n\n  componentDidMount() {\n    this.props.getRecipe(this.props.match.params.id);\n  } // onSubmit is passed down as prop to Modal.js then RecipeForm.js\n  // formValues is equal to the field values when data is submitted in RecipeForm.js\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      type: \"Edit\" // 'pick' desired data from selected recipe to fill formValues\n      ,\n      initialValues: _.pick(this.props.selectedRecipe, \"title\", \"ingredients\", \"directions\"),\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    selectedRecipe: state.recipes[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getRecipe,\n  editRecipe\n})(RecipeEdit);","map":{"version":3,"sources":["C:/Users/thane/Desktop/React_Redux/thane-engen.com/client/src/components/projects/recipe-box/components/recipes/RecipeEdit.js"],"names":["_","React","connect","getRecipe","editRecipe","Modal","RecipeEdit","Component","onSubmit","formValues","props","match","params","id","componentDidMount","render","pick","selectedRecipe","mapStateToProps","state","ownProps","recipes"],"mappings":";AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,eAAtC;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAOvCC,QAPuC,GAO5BC,UAAU,IAAI;AACvB,WAAKC,KAAL,CAAWN,UAAX,CAAsB,KAAKM,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA9C,EAAkDJ,UAAlD;AACD,KATsC;AAAA;;AACvCK,EAAAA,iBAAiB,GAAG;AAClB,SAAKJ,KAAL,CAAWP,SAAX,CAAqB,KAAKO,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA7C;AACD,GAHsC,CAKvC;AACA;;;AAKAE,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,MADP,CAEE;AAFF;AAGE,MAAA,aAAa,EAAEf,CAAC,CAACgB,IAAF,CAAO,KAAKN,KAAL,CAAWO,cAAlB,EAAkC,OAAlC,EAA2C,aAA3C,EAA0D,YAA1D,CAHjB;AAIE,MAAA,QAAQ,EAAE,KAAKT,QAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAUD;;AAtBsC;;AAyBzC,MAAMU,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AAAEH,IAAAA,cAAc,EAAEE,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACT,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAlB,GAAP;AACD,CAFD;;AAIA,eAAeX,OAAO,CACpBgB,eADoB,EAEpB;AAAEf,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAFoB,CAAP,CAGbE,UAHa,CAAf","sourcesContent":["import _ from 'lodash';\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getRecipe, editRecipe } from \"../../actions\";\r\nimport Modal from \"../Modal\";\r\n\r\nclass RecipeEdit extends React.Component {\r\n  componentDidMount() {\r\n    this.props.getRecipe(this.props.match.params.id);\r\n  }\r\n\r\n  // onSubmit is passed down as prop to Modal.js then RecipeForm.js\r\n  // formValues is equal to the field values when data is submitted in RecipeForm.js\r\n  onSubmit = formValues => {\r\n    this.props.editRecipe(this.props.match.params.id, formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Modal \r\n          type=\"Edit\" \r\n          // 'pick' desired data from selected recipe to fill formValues\r\n          initialValues={_.pick(this.props.selectedRecipe, \"title\", \"ingredients\", \"directions\")}\r\n          onSubmit={this.onSubmit} \r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { selectedRecipe: state.recipes[ownProps.match.params.id] };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getRecipe, editRecipe }\r\n)(RecipeEdit);\r\n"]},"metadata":{},"sourceType":"module"}