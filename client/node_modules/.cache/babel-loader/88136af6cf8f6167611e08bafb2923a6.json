{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thane\\\\Desktop\\\\React_Redux\\\\thane-engen.com\\\\src\\\\components\\\\projects\\\\recipe-box\\\\client\\\\src\\\\components\\\\recipes\\\\RecipeForm.js\";\nimport React from \"react\";\nimport { Field, FieldArray, reduxForm } from \"redux-form\";\nimport history from \"../../history\";\n\nclass RecipeForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderField = ({\n      input,\n      label,\n      type,\n      meta: {\n        touched,\n        error\n      }\n    }) => {\n      // Define maxchar length for 'title' field\n      const titleMaxCharLength = () => {\n        const titleForm = document.querySelector(\"input[name='title']\");\n\n        if (titleForm) {\n          titleForm.setAttribute(\"maxlength\", \"60\");\n        }\n      };\n\n      titleMaxCharLength();\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        type: type,\n        placeholder: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      })), touched && error && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, error));\n    };\n\n    this.renderIngredients = ({\n      fields,\n      meta: {\n        error\n      }\n    }) => {\n      return React.createElement(\"ul\", {\n        className: \"custom-field-array-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, fields.map((ingredient, index) => React.createElement(\"li\", {\n        key: index,\n        className: \"ingredient-form-value field-array-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: ingredient,\n        type: \"text\",\n        component: this.renderField,\n        label: \"Ingredient #\".concat(index + 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }), React.createElement(\"i\", {\n        title: \"Remove Ingredient\",\n        onClick: () => fields.remove(index),\n        className: \"fas fa-trash-alt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"add-buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => fields.push(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Add \", !fields.length ? \"Ingredient(s)\" : \"Another Ingredient\")), error && React.createElement(\"li\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, error)));\n    };\n\n    this.renderTextArea = ({\n      input,\n      label,\n      type,\n      meta: {\n        touched,\n        error\n      }\n    }) => {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, label), React.createElement(\"textarea\", Object.assign({}, input, {\n        type: type,\n        placeholder: label,\n        rows: \"10\",\n        cols: \"40\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })), touched && error && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, error));\n    };\n\n    this.renderDirections = ({\n      fields,\n      meta: {\n        error\n      }\n    }) => {\n      return React.createElement(\"ul\", {\n        className: \"custom-field-array-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, fields.map((direction, index) => React.createElement(\"li\", {\n        key: index,\n        className: \"direction-form-value field-array-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: direction,\n        type: \"text\",\n        component: this.renderTextArea,\n        label: \"Direction #\".concat(index + 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"direction-delete-button\",\n        onClick: () => fields.remove(index),\n        title: \"Remove Direction\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-trash-alt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Delete\")))), React.createElement(\"div\", {\n        className: \"add-buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => fields.push(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Add \", !fields.length ? \"Direction(s)\" : \"Another Direction\")), error && React.createElement(\"li\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, error)));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"title-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderField,\n      type: \"text\",\n      label: \"Recipe Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(FieldArray, {\n      name: \"ingredients\",\n      component: this.renderIngredients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(FieldArray, {\n      name: \"directions\",\n      component: this.renderDirections,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"form-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"ui button primary big\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"span\", {\n      className: \"ui button negative big\",\n      onClick: () => history.goBack(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Cancel\"))));\n  }\n\n}\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.title) {\n    errors.title = \"! Required\";\n  }\n\n  if (!values.ingredients || !values.ingredients.length) {\n    errors.ingredients = {\n      _error: \"At least one ingredient must be entered\"\n    };\n  } else {\n    const ingredientArrayErrors = [];\n    values.ingredients.forEach((ingredient, index) => {\n      if (!ingredient || !ingredient.length) {\n        ingredientArrayErrors[index] = \"! Required\";\n      }\n    });\n\n    if (ingredientArrayErrors.length) {\n      errors.ingredients = ingredientArrayErrors;\n    }\n  }\n\n  if (!values.directions || !values.directions.length) {\n    errors.directions = {\n      _error: \"At least one direction must be entered\"\n    };\n  } else {\n    const directionArrayErrors = [];\n    values.directions.forEach((direction, index) => {\n      if (!direction || !direction.length) {\n        directionArrayErrors[index] = \"! Required\";\n      }\n    });\n\n    if (directionArrayErrors.length) {\n      errors.directions = directionArrayErrors;\n    }\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"recipeForm\",\n  validate\n})(RecipeForm);","map":{"version":3,"sources":["C:/Users/thane/Desktop/React_Redux/thane-engen.com/src/components/projects/recipe-box/client/src/components/recipes/RecipeForm.js"],"names":["React","Field","FieldArray","reduxForm","history","RecipeForm","Component","renderField","input","label","type","meta","touched","error","titleMaxCharLength","titleForm","document","querySelector","setAttribute","renderIngredients","fields","map","ingredient","index","remove","push","length","renderTextArea","renderDirections","direction","onSubmit","formValues","props","render","handleSubmit","goBack","validate","values","errors","title","ingredients","_error","ingredientArrayErrors","forEach","directions","directionArrayErrors","form"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Field, FieldArray, reduxForm } from \"redux-form\";\r\nimport history from \"../../history\";\r\n\r\nclass RecipeForm extends React.Component {\r\n  renderField = ({ input, label, type, meta: { touched, error } }) => {\r\n    // Define maxchar length for 'title' field\r\n    const titleMaxCharLength = () => {\r\n      const titleForm = document.querySelector(\"input[name='title']\");\r\n      if (titleForm) {\r\n        titleForm.setAttribute(\"maxlength\", \"60\");\r\n      }\r\n    };\r\n    titleMaxCharLength();\r\n    return (\r\n      <React.Fragment>\r\n        <label>{label}</label>\r\n        <input {...input} type={type} placeholder={label} />\r\n        {touched && error && <span>{error}</span>}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  renderIngredients = ({ fields, meta: { error } }) => {\r\n    return (\r\n      <ul className=\"custom-field-array-container\">\r\n        {fields.map((ingredient, index) => (\r\n          <li key={index} className=\"ingredient-form-value field-array-item\">\r\n            <Field\r\n              name={ingredient}\r\n              type=\"text\"\r\n              component={this.renderField}\r\n              label={`Ingredient #${index + 1}`}\r\n            />\r\n            <i\r\n              title=\"Remove Ingredient\"\r\n              onClick={() => fields.remove(index)}\r\n              className=\"fas fa-trash-alt\"\r\n            ></i>\r\n          </li>\r\n        ))}\r\n        <div className=\"add-buttons\">\r\n          <li>\r\n            <button type=\"button\" onClick={() => fields.push()}>\r\n              Add {!fields.length ? \"Ingredient(s)\" : \"Another Ingredient\"}\r\n            </button>\r\n          </li>\r\n          {error && <li className=\"error\">{error}</li>}\r\n        </div>\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  renderTextArea = ({ input, label, type, meta: { touched, error } }) => {\r\n    return (\r\n      <React.Fragment>\r\n        <label>{label}</label>\r\n        <textarea\r\n          {...input}\r\n          type={type}\r\n          placeholder={label}\r\n          rows=\"10\"\r\n          cols=\"40\"\r\n        />\r\n        {touched && error && <span>{error}</span>}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  renderDirections = ({ fields, meta: { error } }) => {\r\n    return (\r\n      <ul className=\"custom-field-array-container\">\r\n        {fields.map((direction, index) => (\r\n          <li key={index} className=\"direction-form-value field-array-item\">\r\n            <Field\r\n              name={direction}\r\n              type=\"text\"\r\n              component={this.renderTextArea}\r\n              label={`Direction #${index + 1}`}\r\n            />\r\n            <div\r\n              id=\"direction-delete-button\"\r\n              onClick={() => fields.remove(index)}\r\n              title=\"Remove Direction\"\r\n            >\r\n              <i className=\"fas fa-trash-alt\"></i>\r\n              <span>Delete</span>\r\n            </div>\r\n          </li>\r\n        ))}\r\n        <div className=\"add-buttons\">\r\n          <li>\r\n            <button type=\"button\" onClick={() => fields.push()}>\r\n              Add {!fields.length ? \"Direction(s)\" : \"Another Direction\"}\r\n            </button>\r\n          </li>\r\n          {error && <li className=\"error\">{error}</li>}\r\n        </div>\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  onSubmit = formValues => {\r\n    this.props.onSubmit(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n          <div id=\"title-form\">\r\n            <Field\r\n              name=\"title\"\r\n              component={this.renderField}\r\n              type=\"text\"\r\n              label=\"Recipe Title\"\r\n            />\r\n          </div>\r\n          <FieldArray name=\"ingredients\" component={this.renderIngredients} />\r\n          <hr />\r\n          <FieldArray name=\"directions\" component={this.renderDirections} />\r\n          <div id=\"form-buttons\">\r\n            <button className=\"ui button primary big\">Submit</button>\r\n            <span\r\n              className=\"ui button negative big\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              Cancel\r\n            </span>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst validate = values => {\r\n  const errors = {};\r\n\r\n  if (!values.title) {\r\n    errors.title = \"! Required\";\r\n  }\r\n\r\n  if (!values.ingredients || !values.ingredients.length) {\r\n    errors.ingredients = { _error: \"At least one ingredient must be entered\" };\r\n  } else {\r\n    const ingredientArrayErrors = [];\r\n    values.ingredients.forEach((ingredient, index) => {\r\n      if (!ingredient || !ingredient.length) {\r\n        ingredientArrayErrors[index] = \"! Required\";\r\n      }\r\n    });\r\n    if (ingredientArrayErrors.length) {\r\n      errors.ingredients = ingredientArrayErrors;\r\n    }\r\n  }\r\n\r\n  if (!values.directions || !values.directions.length) {\r\n    errors.directions = { _error: \"At least one direction must be entered\" };\r\n  } else {\r\n    const directionArrayErrors = [];\r\n    values.directions.forEach((direction, index) => {\r\n      if (!direction || !direction.length) {\r\n        directionArrayErrors[index] = \"! Required\";\r\n      }\r\n    });\r\n    if (directionArrayErrors.length) {\r\n      errors.directions = directionArrayErrors;\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport default reduxForm({\r\n  form: \"recipeForm\",\r\n  validate\r\n})(RecipeForm);\r\n"]},"metadata":{},"sourceType":"module"}